require(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("R.matlab")
install.packages("plotrix")
ggplotRegression <- function (fit) {
p <- ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =",signif(fit$coef[[1]],2 ),"\n",
" Slope =",signif(fit$coef[[2]], 2),
" P =",signif(summary(fit)$coef[2,4], 2)))
p
}
source('~/Documents/MATLAB/mashup/exploreBeta.R')
ls
source('~/Documents/MATLAB/mashup/exploreBeta.R')
ls()
cd('..')
getwd()
setwd("documents/matlab/mashup")
getes()
getwd()
ls()
source('~/Documents/MATLAB/mashup/exploreBeta.R')
#' compare betas and eigenvalues for networks
rm(list=ls())
s
require(R.matlab)
require(plotrix)
require(ggplot2)
# --------------------------------
# helper functions
# from https://susanejohnston.wordpress.com/2012/08/09/a-quick-and-easy-function-to-plot-lm-results-in-r/
ggplotRegression <- function (fit) {
p <- ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =",signif(fit$coef[[1]],2 ),"\n",
" Slope =",signif(fit$coef[[2]], 2),
" P =",signif(summary(fit)$coef[2,4], 2)))
p
}
# --------------------------------
# work begins
outDir <- "result/netdx/H_vs_beta"
if (!file.exists(outDir)) dir.create(outDir)
# load data
data <- readMat("result/netdx/eigenvalue_list.mat")
betas <- readMat("result/netdx/linear_regression_output.mat")
H <- t(data[[1]])
H <- cbind(H,betas[[1]])
colnames(H) <- c("age","grade","stage","beta")
data
plotrix::color2D.matplot(H,show.values=F,axes=F,extremes=c("yellow","red"),
plotrix::color2D.matplot(H,show.values=F,axes=F,extremes=c("yellow","red"),
border='white',las=1,ylab="K",xlab="N, beta")
plotrix::color2D.matplot(H,show.values=F,axes=F,extremes=c("yellow","red"),
border='white',las=1,ylab="K",xlab="N, beta")
plotrix::color2D.matplot(H,show.values=F,axes=F,extremes=c("yellow","red"),
border='white',las=1,ylab="K",xlab="N, beta")
axis(1,at=1:ncol(H)-0.5, labels=colnames(H),cex.axis=0.5)
plist
pList <- list()
fit <- lm(beta ~ age, data = H); pList[[1]] <- ggplotRegression(fit)
fit <- lm(beta ~ grade, data = H); pList[[2]] <- ggplotRegression(fit)
fit <- lm(beta ~ stage, data = H); pList[[3]] <- ggplotRegression(fit)
H <- as.data.frame(H)
pList <- list()
fit <- lm(beta ~ age, data = H); pList[[1]] <- ggplotRegression(fit)
fit <- lm(beta ~ grade, data = H); pList[[2]] <- ggplotRegression(fit)
fit <- lm(beta ~ stage, data = H); pList[[3]] <- ggplotRegression(fit)
plist
pList
lm(beta ~ age, data = H)
a <- list()
a
a[1] = 1
a
a[[2]] = 2
a
a[1]
a[2]
a[[1]]
x<-matrix(rnorm(1024),nrow=32)
# simulate a correlation matrix with values -0.5 to 0.5
x<-rescale(x,c(-0.5,0.5))
# add a column with the extreme values (-1,1) to calculate
# the colors, then drop the extra column in the result
cellcol<-color.scale(cbind(x,c(-1,rep(1,31))),c(0,1),0,c(1,0))[,1:32]
color2D.matplot(x,cellcolors=cellcol,main="Blue to red correlations")
x<-matrix(rnorm(1024),nrow=32)
# simulate a correlation matrix with values -0.5 to 0.5
x<-rescale(x,c(-0.5,0.5))
# add a column with the extreme values (-1,1) to calculate
# the colors, then drop the extra column in the result
cellcol<-color.scale(cbind(x,c(-1,rep(1,31))),c(0,1),0,c(1,0))[,1:32]
color2D.matplot(x,cellcolors=cellcol,main="Blue to red correlations")
# do the legend call separately to get the full range
color.legend(0,-4,10,-3,legend=c(-1,-0.5,0,0.5,1),
rect.col=color.scale(c(-1,-0.5,0,0.5,1),c(0,1),0,c(1,0)),align="rb")
x<-matrix(rnorm(100),nrow=10)
# generate colors that show negative values in red to brown
# and positive in blue-green to green
cellcol<-matrix(rep("#000000",100),nrow=10)
cellcol[x<0]<-color.scale(x[x<0],c(1,0.8),c(0,0.8),0)
cellcol[x>0]<-color.scale(x[x>0],0,c(0.8,1),c(0.8,0))
# now do hexagons without borders
color2D.matplot(x,cellcolors=cellcol,xlab="Columns",ylab="Rows",
do.hex=TRUE,main="2D matrix plot (hexagons)",border=NA)
# for this one, we have to do the color legend separately
# because of the two part color scaling
legval<-seq(min(x),max(x),length.out=6)
legcol<-rep("#000000",6)
legcol[legval<0]<-color.scale(legval[legval<0],c(1,0.8),c(0,0.8),0)
legcol[legval>0]<-color.scale(legval[legval>0],0,c(0.8,1),c(0.8,0))
color.legend(0,-1.8,3,-1.4,round(c(min(x),0,max(x)),1),rect.col=legcol)
# do a color only association plot
xt<-table(sample(1:10,100,TRUE),sample(1:10,100,TRUE))
observed<-xt[,rev(1:dim(xt)[2])]
expected<-outer(rowSums(observed),colSums(observed),"*")/sum(xt)
deviates<-(observed-expected)/sqrt(expected)
cellcol<-matrix(rep("#000000",100),nrow=10)
cellcol[deviates<0]<-
color.scale(deviates[deviates<0],c(1,0.8),c(0,0.5),0)
cellcol[deviates>0]<-
color.scale(deviates[deviates>0],0,c(0.7,0.8),c(0.5,0))
color2D.matplot(x=round(deviates,2),cellcolors=cellcol,
show.values=TRUE,main="Association plot")
# Hinton diagram
border.col<-color.scale(x,extremes=2:3)
color2D.matplot(x,extremes=c(2,3),main="Hinton diagram (green +, red -)",
Hinton=TRUE,border=border.col)
# waffle plot of percentages with two contributing elements
waffle.col<-fill.corner(c(rep("red",18),rep("blue",45)),10,10)
color2D.matplot(matrix(1:100,nrow=10),cellcolors=waffle.col,yrev=FALSE,
border="lightgray",xlab="",ylab="",main="Waffle plot",axes=FALSE)
